#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<pthread.h>
#define MAX 1000
#define MIN 100
#define SIZE 900

int y,c[900];
struct  p
{
        int pid,status;
        struct p *next;
}*root;
int  allocate_map()
{
        root=NULL;
        y=MIN;
}
int items[SIZE];
int front = -1, rear =-1;

int isFull()
{
    if( (front == rear + 1) || (front == 0 && rear == SIZE-1)) return 1;
    return 0;
}

int isEmpty()
{
    if(front == -1) return 1;
    return 0;
}

void enQueue(int element)
{
    if(isFull()) printf("\n Queue is full!! \n");
    else
    {
        if(front == -1) front = 0;
        rear = (rear + 1) % SIZE;
        items[rear] = element;

    }
}
int deQueue()
{
    int element;
    if(isEmpty()) {

        return(-1);
    } else {
        element = items[front];
        if (front == rear){
            front = -1;
            rear = -1;
        }
        else {
            front = (front + 1) % SIZE;

        }
        return(element);
    }
}

int allocate_pid()
{
        struct p *t2;
        if(root==NULL)
        {
                struct p *t1=(struct p *)malloc(sizeof(struct p));
                t1->status=1;
                y++;
                t1->pid=y;
                t1->next=NULL;
                printf("pid %d is assigned\n\n",t1->pid);
                root=t1;
                return t1->pid;
        }
        if(y>=1000)
        {
                printf("cannot assign\n\n");
                return 0;
        }
       else
        {
                t2=root;
                while(t2->next!=NULL)
                {
                        if(t2->status==0)
                        {
                                break;
                        }
                        t2=t2->next;
                }
        }
        //printf("%d\n",t2->status);
        if(t2->status==0)
        {

        t2->status=1;
        printf("pid %d is assigned\n\n",t2->pid);
        return t2->pid;
        }
        if(t2->next==NULL)
        {
                struct p *t3=(struct p *)malloc(sizeof(struct p));
                t2->next=t3;
                t3->status=1;
                y++;

                t3->pid=y;
                t3->next=NULL;
                //printf("I am here\n");
                printf("pid %d is assigned\n\n",t3->pid);
                return t3->pid;
        }

        //t2->pid=y;
        //y++;

}
void release_pid(int x)
{
        struct p *t=(struct p *)malloc(sizeof(struct p));
        t=root;
        while(t->next!=NULL)
        {
                if(t->pid==x)
                {

                        break;
                }
        t=t->next;
        }
        t->status=0;
        printf("pid having value %d is released\n\n",t->pid);
}
void sleep1()
{
        int s;
        s=rand()%10;
        printf("%d\n",s);
        sleep(s);
}
void test()
{

                int j=0;
                c[j]=allocate_pid();
                enQueue(c[j]);
                int v=deQueue();
                sleep1();
                release_pid(v);


}
main()
{       int i,a;
printf("enter no of threads you need to create\n");
scanf("%d",&a);
        pthread_t pt[a];
        allocate_map();
for(i=0;i<a;i++)
        pthread_create(&pt[i],NULL,test,NULL);
for(i=0;i<a;i++)
pthread_join(pt[i],NULL);
}


